--- a/CMakeLists.txt	2018-04-02 21:07:02.000000000 +0200
+++ b/CMakeLists.txt	2018-04-02 21:07:26.000000000 +0200
@@ -1,10 +1,18 @@
-cmake_minimum_required(VERSION 2.8)
-# Silence warning about if()
+cmake_minimum_required(VERSION 3.0)
+
+# Silence warning about PROJECT_VERSION
+cmake_policy(SET CMP0048 NEW)
+
+# Enable MACOSX_RPATH by default
+cmake_policy(SET CMP0042 NEW)
+
 if(NOT CMAKE_VERSION VERSION_LESS 3.1)
+  # Silence warning about if()
   cmake_policy(SET CMP0054 NEW)
 endif()
 
-project(GLAD)
+project(GLAD VERSION 0.1.18 LANGUAGES C)
+
 
 set(GLAD_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
 set(GLAD_OUT_DIR "${CMAKE_CURRENT_BINARY_DIR}")
@@ -16,9 +24,13 @@
 set(GLAD_GENERATOR "c" CACHE STRING "Language to generate the binding for")
 set(GLAD_EXTENSIONS "" CACHE STRING "Path to extensions file or comma separated list of extensions, if missing all extensions are included")
 set(GLAD_SPEC "gl" CACHE STRING "Name of the spec")
-set(GLAD_NO_LOADER OFF CACHE BOOL "No loader")
-set(GLAD_EXPORT ON CACHE BOOL "Set export variables for external project")
-set(GLAD_INSTALL OFF CACHE BOOL "Generate installation target")
+option(GLAD_NO_LOADER "No loader" OFF)
+if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
+  option(GLAD_EXPORT "Set export variables for external project" OFF)
+else()
+  option(GLAD_EXPORT "Set export variables for external project" ON)
+endif()
+option(GLAD_INSTALL "Generate installation target" OFF)
 
 if(GLAD_GENERATOR STREQUAL "d")
   list(APPEND GLAD_SOURCES
@@ -42,7 +54,6 @@
   )
 else()
   set(GLAD_INCLUDE_DIRS "${GLAD_OUT_DIR}/include")
-  set(GLAD_LINKER_LANGUAGE CXX)
   list(APPEND GLAD_SOURCES
     "${GLAD_OUT_DIR}/src/glad.c"
     "${GLAD_INCLUDE_DIRS}/glad/glad.h"
@@ -70,7 +81,18 @@
 set_source_files_properties(${GLAD_SOURCES} PROPERTIES GENERATED TRUE)
 add_library(glad ${GLAD_SOURCES})
 add_dependencies(glad glad-generate-files)
-target_include_directories(glad PUBLIC ${GLAD_INCLUDE_DIRS})
+target_include_directories(glad 
+    PRIVATE
+        $<BUILD_INTERFACE:${GLAD_INCLUDE_DIRS}>
+    INTERFACE
+        $<INSTALL_INTERFACE:include/glad>)
+
+# Are we building a shared library?
+get_target_property(library_type glad TYPE)
+if (library_type STREQUAL SHARED_LIBRARY)
+  # If so, define the macro GLAD_API_EXPORT on the command line.
+  target_compile_definitions(glad PUBLIC GLAD_GLAPI_EXPORT PRIVATE GLAD_GLAPI_EXPORT_BUILD)
+endif()
 
 if(GLAD_LINKER_LANGUAGE)
   set_target_properties(glad PROPERTIES LINKER_LANGUAGE ${GLAD_LINKER_LANGUAGE})
@@ -84,9 +106,51 @@
 
 # Install
 if(GLAD_INSTALL)
+
+  set(config_install_dir "lib/cmake/glad")
+  set(version_config "${CMAKE_CURRENT_BINARY_DIR}/gladConfigVersion.cmake")
+  set(project_config "${CMAKE_CURRENT_BINARY_DIR}/gladConfig.cmake")
+  set(targets_export_name "gladTargets")
+  set(namespace "glad::")
+
+  # Include module with fuction 'write_basic_package_version_file'
+  include(CMakePackageConfigHelpers)
+
+  # Configure 'gladConfigVersion.cmake'
+  # PROJECT_VERSION is used as a VERSION
+  write_basic_package_version_file("${version_config}" COMPATIBILITY SameMajorVersion)
+
+  # Configure 'gladConfig.cmake'
+  # Uses targets_export_name variable.
+  configure_package_config_file(
+    "Config.cmake.in"
+    "${project_config}"
+    INSTALL_DESTINATION "${config_install_dir}")
+
+  # Targets:
+  install(
+    TARGETS glad
+    EXPORT "${targets_export_name}"
+    LIBRARY DESTINATION "lib"
+    ARCHIVE DESTINATION "lib"
+    RUNTIME DESTINATION "bin"
+    INCLUDES DESTINATION "include")
+
   if(GLAD_INCLUDE_DIRS)
-    install(DIRECTORY ${GLAD_INCLUDE_DIRS} DESTINATION ${CMAKE_INSTALL_PREFIX})
+    install(
+      DIRECTORY ${GLAD_INCLUDE_DIRS}
+      DESTINATION ${CMAKE_INSTALL_PREFIX})
   endif()
-  install(TARGETS glad EXPORT glad-targets
-          ARCHIVE DESTINATION lib)
+
+  # Install gladConfig.cmake, gladConfigVersion.cmake 
+  install(
+    FILES "${project_config}" "${version_config}"
+    DESTINATION "${config_install_dir}")
+
+  # Create and install gladTargets.cmake
+  install(
+    EXPORT "${targets_export_name}"
+    NAMESPACE "${namespace}"
+    DESTINATION "${config_install_dir}")
+
 endif()
